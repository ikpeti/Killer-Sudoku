@page "/killersudoku"
@using System.Drawing

<link href="css/app.css" rel="stylesheet" />
<h1>KillerSudoku</h1>
<h2 id="errors">@errors</h2>
<br />
<div id="board">
    @for(int i = 0; i < 9; i++)
    {
        @for(int j = 0; j < 9; j++)
        {
            int k = i;
            int l = j;
            int number = -board[i, j];
            
            @if((i == 2 || i == 5) && (j == 2 || j == 5))
            {
                @if (board[i, j] == 0)
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="horizontal-line vertical-line tile" style="background-color:#33475b" @onclick="() => SelectTile(k, l)"/>
                }
                else if(board[i, j] > 0)
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="horizontal-line vertical-line tile tile-start" @onclick="() => SelectTile(k, l)">@board[i, j]</div>
                }
                else
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="horizontal-line vertical-line tile" @onclick="() => SelectTile(k, l)">@number</div>
                }
            }
            else @if(i == 2 || i == 5)
            {
                @if (board[i, j] == 0)
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="horizontal-line tile" @onclick="() => SelectTile(k, l)"/>
                }
                else if(board[i, j] > 0)
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="horizontal-line tile tile-start" @onclick="() => SelectTile(k, l)">@board[i, j]</div>
                }
                else
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="horizontal-line tile" @onclick="() => SelectTile(k, l)">@number</div>
                }
            }
            else @if(j == 2 || j == 5)
            {
                @if (board[i, j] == 0)
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="vertical-line tile" @onclick="() => SelectTile(k, l)"/>
                }
                else if(board[i, j] > 0)
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="vertical-line tile tile-start" @onclick="() => SelectTile(k, l)">@board[i, j]</div>
                }
                else
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="vertical-line tile" @onclick="() => SelectTile(k, l)">@number</div>
                }
            }
            else
            {
                @if (board[i, j] == 0)
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="tile" @onclick="() => SelectTile(k, l)"/>
                }
                else if(board[i, j] > 0)
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="tile tile-start" @onclick="() => SelectTile(k, l)">@board[i, j]</div>
                }
                else
                {
                    <div id="@i.ToString() + - + @j.ToString()" class="tile" @onclick="() => SelectTile(k, l)">@number</div>
                }
            }
        }
    }
</div>
<br/>
<div id="digits">
    @for(int i = 1; i <= 9; i++)
    {
        int k = i;
        @if(i == @numberSelected)
        {
            <div id="@i" class="number number-selected" @onclick="() => SelectNumber(k)">@i</div>
        }else
        {
            <div id="@i" class="number" @onclick="() => SelectNumber(k)">@i</div>
        }
    }
</div>

@code {
    int numberSelected = 0;

    int errors = 0;
    int[,] board = new int[9, 9]
    {
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0},
    };
    int[,] solution = new int[9, 9]
    {
        {4, 1, 8, 9, 5, 2, 6, 3, 7},
        {5, 9, 6, 8, 7, 3, 1, 2, 4},
        {2, 3, 7, 4, 1, 6, 9, 8, 5},
        {7, 8, 2, 6, 9, 4, 5, 1, 3},
        {3, 6, 1, 2, 8, 5, 7, 4, 9},
        {9, 5, 4, 7, 3, 1, 2, 6, 8},
        {1, 7, 9, 3, 2, 8, 4, 5, 6},
        {6, 2, 3, 5, 4, 9, 8, 7, 1},
        {8, 4, 5, 1, 6, 7, 3, 9, 2},
    };

    Dictionary<int[][], int> killerValues = new Dictionary<int[][], int>();
    List<int[]> firstElements = new List<int[]>();

    public void SelectNumber(int i)
    {
        numberSelected = i;
    }

    public void SelectTile(int i, int j)
    {
        if(numberSelected != 0 && board[i, j] == 0)
        {
            if (numberSelected == solution[i, j])
            {
                board[i, j] = -numberSelected;
            }
            else
            {
                errors++;
            }
        }
    }

    protected override void OnInitialized()
    {        
        killerValues.Add(new int[2][] {new int[2] {0, 0}, new int[2] {0, 1}}, 5);
        killerValues.Add(new int[2][] {new int[2] {0, 2}, new int[2] {0, 3}}, 17);
        killerValues.Add(new int[2][] {new int[2] {0, 4}, new int[2] {1, 4}}, 12);
        killerValues.Add(new int[2][] {new int[2] {0, 5}, new int[2] {0, 6}}, 8);
        killerValues.Add(new int[2][] {new int[2] {0, 7}, new int[2] {1, 7}}, 5);
        killerValues.Add(new int[3][] {new int[2] {0, 8}, new int[2] {1, 8}, new int[2] {2, 8}}, 16);
        killerValues.Add(new int[2][] {new int[2] {1, 0}, new int[2] {2, 0}}, 7);
        killerValues.Add(new int[2][] {new int[2] {1, 1}, new int[2] {1, 2}}, 15);
        killerValues.Add(new int[4][] {new int[2] {1, 3}, new int[2] {2, 3}, new int[2] {2, 4}, new int[2] {3, 4}}, 22);
        killerValues.Add(new int[2][] {new int[2] {1, 5}, new int[2] {1, 6}}, 4);
        killerValues.Add(new int[3][] {new int[2] {2, 1}, new int[2] {3, 1}, new int[2] {4, 1}}, 17);
        killerValues.Add(new int[3][] {new int[2] {2, 2}, new int[2] {3, 2}, new int[2] {3, 3}}, 15);
        killerValues.Add(new int[4][] {new int[2] {2, 5}, new int[2] {2, 6}, new int[2] {2, 7}, new int[2] {3, 5}}, 27);
        killerValues.Add(new int[2][] {new int[2] {3, 0}, new int[2] {4, 0}}, 10);
        killerValues.Add(new int[2][] {new int[2] {3, 6}, new int[2] {3, 7}}, 6);
        killerValues.Add(new int[5][] {new int[2] {3, 8}, new int[2] {4, 7}, new int[2] {4, 8}, new int[2] {5, 6}, new int[2] {5, 7}}, 24);
        killerValues.Add(new int[3][] {new int[2] {4, 2}, new int[2] {4, 3}, new int[2] {5, 2}}, 7);
        killerValues.Add(new int[5][] {new int[2] {4, 4}, new int[2] {4, 5}, new int[2] {4, 6}, new int[2] {5, 4}, new int[2] {5, 5}}, 24);
        killerValues.Add(new int[2][] {new int[2] {5, 0}, new int[2] {5, 1}}, 14);
        killerValues.Add(new int[3][] {new int[2] {5, 3}, new int[2] {6, 2}, new int[2] {6, 3}}, 19);
        killerValues.Add(new int[4][] {new int[2] {5, 8}, new int[2] {6, 8}, new int[2] {7, 7}, new int[2] {7, 8}}, 22);
        killerValues.Add(new int[2][] {new int[2] {6, 0}, new int[2] {6, 1}}, 8);
        killerValues.Add(new int[5][] {new int[2] {6, 4}, new int[2] {6, 5}, new int[2] {7, 4}, new int[2] {7, 5}, new int[2] {8, 5}}, 30);
        killerValues.Add(new int[4][] {new int[2] {6, 6}, new int[2] {6, 7}, new int[2] {7, 6}, new int[2] {8, 6}}, 20);
        killerValues.Add(new int[2][] {new int[2] {7, 0}, new int[2] {8, 0}}, 14);
        killerValues.Add(new int[2][] {new int[2] {7, 1}, new int[2] {7, 2}}, 5);
        killerValues.Add(new int[3][] {new int[2] {7, 3}, new int[2] {8, 3}, new int[2] {8, 4}}, 12);
        killerValues.Add(new int[2][] {new int[2] {8, 1}, new int[2] {8, 2}}, 9);
        killerValues.Add(new int[2][] {new int[2] {8, 7}, new int[2] {8, 8}}, 11);

        firstElements.Add(new int[2] { 0, 0 });
        firstElements.Add(new int[2] {0, 2});
        firstElements.Add(new int[2] {0, 4});
        firstElements.Add(new int[2] {0, 5});
        firstElements.Add(new int[2] {0, 7});
        firstElements.Add(new int[2] {0, 8});
        firstElements.Add(new int[2] {1, 0});
        firstElements.Add(new int[2] {1, 1});
        firstElements.Add(new int[2] {1, 3});
        firstElements.Add(new int[2] {1, 5});
        firstElements.Add(new int[2] {2, 1});
        firstElements.Add(new int[2] {2, 2});
        firstElements.Add(new int[2] {2, 5});
        firstElements.Add(new int[2] {3, 0});
        firstElements.Add(new int[2] {3, 6});
        firstElements.Add(new int[2] {3, 8});
        firstElements.Add(new int[2] { 4, 2 });
        firstElements.Add(new int[2] { 4, 4 });
        firstElements.Add(new int[2] { 5, 0 });
        firstElements.Add(new int[2] { 5, 3 });
        firstElements.Add(new int[2] { 5, 8 });
        firstElements.Add(new int[2] { 6, 0 });
        firstElements.Add(new int[2] { 6, 4 });
        firstElements.Add(new int[2] { 6, 6 });
        firstElements.Add(new int[2] { 7, 0 });
        firstElements.Add(new int[2] { 7, 1 });
        firstElements.Add(new int[2] { 7, 3 });
        firstElements.Add(new int[2] { 8, 1 });
        firstElements.Add(new int[2] {8, 7});
    }
}

